@using web_payrolls.Helpers
@using web_payrolls.Models
@model List<web_payrolls.Models.tblProduction_PK_Stock_In_Product_Cut>
@{
  ViewBag.Title = "Add Stock In Product Cut";
  ViewBag.Page = "Add Stock In Product Cut";

  // connection
  var db = new DB_Connection();
  var provider = new ContextProvider(new ClHelper(), new DB_Connection());
  // boss
  var hod = db
    .tblBosses
    .Select(boss => new SelectListItem()
    {
      Value = boss.PK_Boss_Id + "",
      Text = boss.Name,
      Selected = boss.PK_Boss_Id == provider.ManagerId
    })
    .ToList();

  // company
  var companies = db
    .tblCompanies
    .Where(company => company.FK_Boss_Id == provider.ManagerId)
    .Select(company => new SelectListItem()
    {
      Value = company.PK_Comp_Id + "",
      Text = company.Comp_Name,
      Selected = company.PK_Comp_Id == provider.ManagerId
    })
    .ToList();

}

<style>
    /*.clockpicker-popover {*/
    /*    z-index: 999999 !important;*/
    /*}*/

    label{
        font-size: 13px;
    }

    .btn-green {
         background: #428bca !important;
         color: white;
    }

    .style{
      width: 100px;
      font-size: 14px;
    }
</style>

<div class="card">

  <div class="card-body">

    <form method="post" id="form-add-details">

      @Html.AntiForgeryToken()

      <div class="row">

        <div class="col-md-12">

          <div class="row">

            @* choose master *@
            <div class="form-group col-md-3">
              <label>
                @Resources.Voucher.HOD<span class="text-danger"> * </span>
              </label>
              <div class="controls">
                @Html.DropDownList("txtManager", hod, "-- Choose Hod --", new {@class = "form-control"})
                <div class="help-block"></div>
              </div>
            </div>

            <div class="form-group col-md-3">
              <label>
                @Resources.Voucher.Company<span class="text-danger"> *</span>
              </label>
              <div class="controls">
                @Html.DropDownList("txtCompany", companies, "-- Choose Company --", new {@class = "form-control"})
                <div class="help-block"></div>
              </div>
            </div>

            @* <div class="form-group col-md-3"> *@
            @*   <label> *@
            @*     @Resources.Voucher.Date<span class="text-danger"> * </span> *@
            @*   </label> *@
            @*   <div class="controls"> *@
            @*     <input type="date" name="date" id="date" class="form-control"> *@
            @*     <div class="help-block"></div> *@
            @*   </div> *@
            @* </div> *@
            @* *@
            @* <div class="form-group col-md-3"> *@
            @*   <label> *@
            @*     @Resources.Voucher.Time<span class="text-danger"> * </span> *@
            @*   </label> *@
            @*   <div class="controls"> *@
            @*     <input type="text" name="time" id="time" class="form-control" placeholder="hh:mm" autocomplete="off"> *@
            @*     <div class="help-block"></div> *@
            @*   </div> *@
            @* </div> *@

            @* choose master *@
          </div>
        </div>

      </div>

    </form>
  </div>
</div>

<button type="button" class="btn btn-default btn-sm mb-2" id="btn-add-more">
  <i class="ti-plus"></i> @Resources.Voucher.AddNew
</button>

@Html.Partial("ModalAddMore")

<div id="root">
    <div class="card">
      <div class="card-body">

        <h5><i class="ti-layout-grid2"></i> List All</h5>

        <table class="table table-sm text-center table-bordered" id="table-list-item">
          <thead>
          <tr class="btn-info text-uppercase">
            <th class="text-center style" >@Resources.Voucher.ProductType</th>
            <th class="text-center style" >@Resources.Voucher.Product</th>
            <th class="text-center style" >Color</th>
            <th class="text-center style" >Size</th>
            <th class="text-center style" >Grade</th>
            <th class="text-center style" >@Resources.Voucher.Quantity</th>
            <th class="text-center style" >@Resources.Voucher.Price</th>
            <th class="text-center style" >@Resources.Voucher.Total</th>
            <th class="text-center" style="width: 20px"></th>
          </tr>
          </thead>
          <tbody>

              @foreach (var row in Model)
              {
                <tr data-id="@row.PK_Stock_In_Product_Cut_Id">
                  <td><span class="label label-info">@row.Stock_In_Type</span></td>
                  <td>@row.tblProduction_Grade.tblProduction_Product.Pro_Name</td>
                  <td>@row.tblProduction_Grade.Color</td>
                  <td>@row.tblProduction_Grade.Size</td>
                  <td>@row.tblProduction_Grade.Grade_Name</td>
                  <td><input class="form-control text-center" id="qty" value="@row.In_QTY"/></td>
                  <td><input class="form-control text-center" id="price" value="@row.Price"/></td>
                  <td>$ @(row.In_QTY * row.Price)</td>
                  <td><button class="btn btn-danger btn-sm" id="btn-remove"><i class="ti-minus"></i></button></td>
               </tr>
              }

          </tbody>
          <tfoot>
          <tr class="text-uppercase">
            <th class="text-center bg-info text-white">@Resources.Voucher.Total</th>
            <th class="text-center"></th>
            <th class="text-center"></th>

            <th class="text-center"></th>
            <th class="text-center"></th>
            <th class="text-center"></th>
            <th class="text-center"></th>
            <th class="text-center bg-info font-weight-bold text-white">
              $ @Model.Sum(x => x.Total_Price)
            </th>
            <th class="text-center"></th>
          </tr>
          </tfoot>
        </table>

        <div class="form-group">
          <div class="text-xs-right">
            <button type="button" class="btn btn-info btn-sm float-right" id="btn-add-product-cut">
              <i class="ti-save-alt"></i> @Resources.Voucher.SaveNew
            </button>
          </div>

        </div>

      </div>
    </div>

</div>

@section JavaScript
{
  <script src="https://unpkg.com/react@16/umd/react.production.min.js"></script>
  <script src="https://unpkg.com/react-dom@16/umd/react-dom.production.min.js"></script>
  <script src="https://unpkg.com/babel-standalone@6.15.0/babel.min.js"></script>
}

<script type='text/babel'>
    const { useState , useEffect } = React;

    let token = { __RequestVerificationToken : document.getElementsByName('__RequestVerificationToken')[0].value};

     const style = {
       width: '100px',
       fontSize: '14px'
    };

     const JsonToFormData = (data) => {
       let form_data = new FormData();
       for ( let key in data ) {
            form_data.append(key, data[key]);
       }
       return form_data;
     };

    const headers = {
       "X-ANTI-FORGERY-TOKEN": token.__RequestVerificationToken,
       "Accept": "application/json"
    };


    const FormAddMore = () => {

      const [state,setState] = useState({
          data: []
      });



      useEffect(() =>{

      },[]);

      return(
              <div>

              </div>
      );
    };

    function PageProductStock() {

        return(
             <div>

            </div>
        );
    }
   // ReactDOM.render(<PageProductStock />, document.querySelector('#root'));
</script>



@section Scripts
{
  <script>
        $(function (){
           let token = { __RequestVerificationToken : $('input[name="__RequestVerificationToken"]').val()};


            function DropDownList
            (
                mainSelect, // main
                supSelect, // sup,
                subLabel  // sub label
            )
            {
                $(mainSelect).change(function (){
                    let id = $(this).val();
                    let dataForSent = {
                        id,
                        ...token
                    };
                    let {data} = GetDataApi('/Other/GetCompany', dataForSent);

                    $(supSelect).html(setToSelect({data:data , label: subLabel}));
                });
            }
            // call
            DropDownList('#txtManager','#txtCompany', 'Company');

             // get data from api
              function GetDataApi(url, data) {
                 let dataResponse = null;
                 let error = false;
                 $.ajax({
                   url: url,
                   async: false,
                   type: "POST",
                   global: false,
                   dataType: 'json',
                   data: data,
                   success: function(response) {
                      dataResponse = response
                   },
                   error: function() {
                     error =  true
                   }
                 });
                 return {data: dataResponse, error};
             }

             // get select option
             function setToSelect({data : data, label : label}) {
                   let option = '<option value="">-- ' + 'Choose ' +  label + ' --</option>';
                   for(let item in data){
                       option += '<option value="'+data[item].key+'">' + data[item].value + '</option>';
                   }
                   return option;
             }


            // clock picker
            function ClockPicker(ctx) {
                $(ctx).clockpicker({
                    donetext: 'Done',
                    todayHighlight: true,
                    todayBtn: "linked",
                    format: "yyyy-m-d",
                    autoclose: true,
                    'default': 'now',
                });

            }
            // call clock picker
           // ClockPicker('#time');


            // btn add more
            $('#btn-add-more').click(function (){
                $('#modal-add-more').modal("show");
            });


            // set select 2
            function Select2(ctn){
                $(ctn).select2({ width: '100%', placeholder: "Select an Option", allowClear: true });
            }
            // call
            Select2('#txtManager');
            Select2('#txtCompany');

            // for modal
            function Select2ForModal(ctn){
                $(ctn).select2({
                    width: '100%',
                    placeholder: "Select an Option",
                    allowClear: true,
                    dropdownParent: $('#modal-add-more .modal-content')
                });
            }
            // call
            Select2ForModal('#txtManager_add_more');
            Select2ForModal('#product_type');
            Select2ForModal('#product_name');
            Select2ForModal('#product_grade');

            let today = moment();

            $('#date').val(today.format('YYYY-MM-DD'));

            $('#time').val(today.format('HH:mm'));

            //
           function setClassError(id) {
               $(id).attr('class', 'form-control is-invalid');
           }

           //
           function setRemoveError(id) {
               $(id).attr('class', 'form-control');
           }

           //
           function onChange(id) {
               $(id).change(function () {
                   setRemoveError(id);
               });
           }

            function protectedControl(control) {
               $(control).bind("cut copy paste drag drop", function (e) {
                   e.preventDefault();
               });
           }

            function OnlyNumber(control) {
               protectedControl(control);

               $(control).keypress(function (event) {
                   let value = event.target.value;

                   if (value[0] === '.') {
                       return false;
                   }

                   if ((event.which !== 46 || $(this).val().indexOf('.') !== -1) && (event.which < 48 || event.which > 57)) {
                       event.preventDefault();
                   }
               });
           }

           let getParamsMap = function () {
                let params = window.location.search.split("&");
                let paramsMap = {};
                params.forEach(function (p) {
                    let v = p.split("=");
                    paramsMap[v[0]]=decodeURIComponent(v[1]);
                });
                return paramsMap;
            };

            // modal add more submit
            $('#btn-save-more-grade').click(function (){
                let forms = $('#form-add-more-grade');

                let form = forms.serializeArray();

                let companyId = $('#txtCompany').val();

                let PK_Stock_In_Product_Cut_No_Id = getParamsMap()['PK_Stock_In_Product_Cut_No_Id'];

                if (!companyId){
                  alert('require company...');
                  return;
                }

                if (!PK_Stock_In_Product_Cut_No_Id){
                  alert('require product no id ...');
                  return;
                }

                form.push({name: 'PK_Stock_In_Product_Cut_No_Id', value: PK_Stock_In_Product_Cut_No_Id });

                form.push({name: 'companyId',value: companyId });

                $.ajax({
                  type: 'post',
                  url: '/StockInProductCut/AddItem',
                  data: form,
                  success: function (r){
                    if (r.message){
                      window.location.reload();
                    }
                  }
                });

            });

            // click save
            $('#btn-add-product-cut').click(function (){
                let table = $('#table-list-item tbody tr').length;
                if (table === 0){
                  SweatAlert('Please add item...','warning');
                  return;
                }
                SetAlert('/StockInProductCut/Index', 'Add Stock In Product Cut', 'SIC_'+ getParamsMap()['PK_Stock_In_Product_Cut_No_Id']);
                window.location.href = '/StockInProductCut/Index';
            });

            // set alert
            function SetAlert(link, note, optionKey) {

                let data = {
                    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val(),
                    link,
                    note,
                    optionKey:optionKey
                };

                $.ajax({
                    url: '@Url.Action("SetAlert", "Notification")',
                    type: 'POST',
                    data: data,
                    success: function (response) {
                        console.log(response);
                    }
                });
            }
            // set alert

            // onchange product type
            $("#product_type").change(function (){
                let dataForSent = {
                    ...token,
                    bossId : $("#txtManager_add_more").val(),
                    productType : $(this).val()
                };
                let {data} = GetDataApi('/StockInProductCut/GetProduct', dataForSent);

                $('#product_name').html(setToSelect({data : data , label : 'Product Name'}))
            });

            // product name change
            $('#product_name').change(function (){
                let dataForSent = {
                    ...token,
                    id : $(this).val()
                };

                let {data} = GetDataApi('/StockInProductCut/GetProductGrade', dataForSent);

                let option = ''

                for (let item in data){
                    option += "<option value='"+ data[item].key +"' title='"+data[item].Picture_Path+"'>" + 'Grade : ' + data[item].value + ' Color : ' + data[item].color + ' Size : ' + data[item].size +"</option>"
                }

                $('#product_grade').html(option);
            });

            // select list has image
             $("#product_grade").select2({
             	templateResult: function (value) {
               	    return $("<span>" + value.text + "</span>");
                }
             });

             // sweat alert
              function SweatAlert(message, type) {
                   swal({
                       title: message,
                       type: type,
                       timer: 1500
                   });
              }


              // protected all control qty only number
              function IsPriceOnTableRow(ctn){
                  $(document).on('keypress','#table-list-item tbody input'+ctn,function (e) {
                      protectedControl(ctn);
                      $(ctn).on('input', function(e) {
                          if (/^(\d+(\.\d{0,3})?)?$/.test($(this).val())) {
                              $(this).data('prevValue', $(this).val());
                          } else {
                              $(this).val($(this).data('prevValue') || '');
                          }
                      }).trigger('input');

                  });
              }
              IsPriceOnTableRow('#price');

              // input qty
              function InputQtyOnTableRow(ctn){

                  $(document).on('keypress' , '#table-list-item tbody input' + ctn , function (e){
                      if(e.which === 46){
                         return false;
                      }

                      if (e.which !== 8 && e.which !== 0 && e.which !== 46 && (e.which < 48 || e.which > 57)) {
                          return false;
                      }

                      let text = $(this).val();

                      if (text[0] === '0') {
                         $(this).val(text.substring(1, text.length))
                      }
                  });
              }
              InputQtyOnTableRow('#qty');

              // remove table row
              $(document).delegate('#table-details tbody button','click',function (){
                  $(this).closest('tr').remove();

              });

              // Only number
              OnlyNumber('#txt_price');

              function NumberQty(ctn){
                    $(document).on('keypress', ctn , function (e){

                      if(e.which === 46){
                         return false;
                      }

                      if (e.which !== 8 && e.which !== 0 && e.which !== 46 && (e.which < 48 || e.which > 57)) {
                          return false;
                      }

                      let text = $(this).val();

                      if (text[0] === '0') {
                         $(this).val(text.substring(1, text.length))
                      }
                    });
              }
              // call
              NumberQty('#qty_txt');


              // remove item
             $(document).on('click','#btn-remove',function (){
               let id = $(this).closest('tr').attr('data-id');

               let con = confirm('Are you sure remove ?');

               if (!con){
                 return false;
               }

               $.ajax({
                  type: 'post',
                  url: '/StockInProductCut/RemoveItem',
                  data: {...token, id},
                  success: function (response){
                     if (response.error){
                        alert(response.message);
                        return false;
                     }
                     window.location.reload();
                  }
               });
             });

             // update table row item
             $(document).on('change','#table-list-item tbody tr input',function (){

               let row = $(this).closest('tr');

               let id = row.attr('data-id');

               let qty = row.find('input#qty').val();

               let price = row.find('input#price').val();

               //console.log(id, qty, price);

               $.ajax({
                  type: 'post',
                  url : '/StockInProductCut/UpdateRowItem',
                  data: {id, qty, price, ...token},
                  success:function (r){
                    if (r.message){
                        window.location.reload();
                    }
                    console.log(r);
                  }
               });
             });
        });
    </script>
}
