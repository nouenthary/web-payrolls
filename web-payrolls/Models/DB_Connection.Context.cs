//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace web_payrolls.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DB_Connection : DbContext
    {
        public DB_Connection()
            : base("name=DB_Connection")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<tblAnnouncment> tblAnnouncments { get; set; }
        public virtual DbSet<tblBoss> tblBosses { get; set; }
        public virtual DbSet<tblBrokendBalance> tblBrokendBalances { get; set; }
        public virtual DbSet<tblCompany> tblCompanies { get; set; }
        public virtual DbSet<tblConfig> tblConfigs { get; set; }
        public virtual DbSet<tblCut_Money> tblCut_Money { get; set; }
        public virtual DbSet<tblDepartment> tblDepartments { get; set; }
        public virtual DbSet<tblExchange> tblExchanges { get; set; }
        public virtual DbSet<tblForget_Scan> tblForget_Scan { get; set; }
        public virtual DbSet<tblInput_Money> tblInput_Money { get; set; }
        public virtual DbSet<tblInputLastyear> tblInputLastyears { get; set; }
        public virtual DbSet<tblInventory> tblInventories { get; set; }
        public virtual DbSet<tblLocation> tblLocations { get; set; }
        public virtual DbSet<tblLost_Inventory> tblLost_Inventory { get; set; }
        public virtual DbSet<tblLostBalance> tblLostBalances { get; set; }
        public virtual DbSet<tblLostInventoryNo> tblLostInventoryNoes { get; set; }
        public virtual DbSet<tblModel_Of_Inventory> tblModel_Of_Inventory { get; set; }
        public virtual DbSet<tblNotification> tblNotifications { get; set; }
        public virtual DbSet<tblOver_Time> tblOver_Time { get; set; }
        public virtual DbSet<tblPermission> tblPermissions { get; set; }
        public virtual DbSet<tblPosition> tblPositions { get; set; }
        public virtual DbSet<tblProduction_Color> tblProduction_Color { get; set; }
        public virtual DbSet<tblProduction_Grade> tblProduction_Grade { get; set; }
        public virtual DbSet<tblProduction_Measur> tblProduction_Measur { get; set; }
        public virtual DbSet<tblProduction_PK_Stock_In_Product_Cut> tblProduction_PK_Stock_In_Product_Cut { get; set; }
        public virtual DbSet<tblProduction_PK_Stock_In_Product_Import_Balance> tblProduction_PK_Stock_In_Product_Import_Balance { get; set; }
        public virtual DbSet<tblProduction_Product> tblProduction_Product { get; set; }
        public virtual DbSet<tblProduction_ProductType> tblProduction_ProductType { get; set; }
        public virtual DbSet<tblProduction_Repair_Closth> tblProduction_Repair_Closth { get; set; }
        public virtual DbSet<tblProduction_Repair_Closth_Balance> tblProduction_Repair_Closth_Balance { get; set; }
        public virtual DbSet<tblProduction_Repair_Closth_No> tblProduction_Repair_Closth_No { get; set; }
        public virtual DbSet<tblProduction_Size> tblProduction_Size { get; set; }
        public virtual DbSet<tblProduction_Stock_In_Product_Cut_No> tblProduction_Stock_In_Product_Cut_No { get; set; }
        public virtual DbSet<tblProduction_Stock_In_Product_Import> tblProduction_Stock_In_Product_Import { get; set; }
        public virtual DbSet<tblProduction_StockIn_Complete_Balance> tblProduction_StockIn_Complete_Balance { get; set; }
        public virtual DbSet<tblProduction_StockIn_Cut_On_Loc> tblProduction_StockIn_Cut_On_Loc { get; set; }
        public virtual DbSet<tblProduction_StockIn_Cut_On_LocBalance> tblProduction_StockIn_Cut_On_LocBalance { get; set; }
        public virtual DbSet<tblProduction_StockIn_Cut_On_LocNo> tblProduction_StockIn_Cut_On_LocNo { get; set; }
        public virtual DbSet<tblProduction_StockIn_Product_Cut_Balance> tblProduction_StockIn_Product_Cut_Balance { get; set; }
        public virtual DbSet<tblProduction_Tranfer_From_LocTo_Comp> tblProduction_Tranfer_From_LocTo_Comp { get; set; }
        public virtual DbSet<tblProduction_Use_Fabrik_On_Cut> tblProduction_Use_Fabrik_On_Cut { get; set; }
        public virtual DbSet<tblProduction_Use_Fabrik_On_Cut_Balance> tblProduction_Use_Fabrik_On_Cut_Balance { get; set; }
        public virtual DbSet<tblProducttion_StockIn_Complete_Product> tblProducttion_StockIn_Complete_Product { get; set; }
        public virtual DbSet<tblPuchase> tblPuchases { get; set; }
        public virtual DbSet<tblPuchaseNo> tblPuchaseNoes { get; set; }
        public virtual DbSet<tblRemain_Leave> tblRemain_Leave { get; set; }
        public virtual DbSet<tblReturnInventory> tblReturnInventories { get; set; }
        public virtual DbSet<tblReturnInventoryNo> tblReturnInventoryNoes { get; set; }
        public virtual DbSet<tblRoster> tblRosters { get; set; }
        public virtual DbSet<tblSalary_Type> tblSalary_Type { get; set; }
        public virtual DbSet<tblShareHolder> tblShareHolders { get; set; }
        public virtual DbSet<tblStaff> tblStaffs { get; set; }
        public virtual DbSet<tblStock_In_Inventory_Id> tblStock_In_Inventory_Id { get; set; }
        public virtual DbSet<tblStockBalance_Inventory> tblStockBalance_Inventory { get; set; }
        public virtual DbSet<tblStockBalanceInventoryInDepartment> tblStockBalanceInventoryInDepartments { get; set; }
        public virtual DbSet<tblStockinventoryOnDepartment> tblStockinventoryOnDepartments { get; set; }
        public virtual DbSet<tblSum_Sal> tblSum_Sal { get; set; }
        public virtual DbSet<tblSupplyer> tblSupplyers { get; set; }
        public virtual DbSet<tblTax> tblTaxes { get; set; }
        public virtual DbSet<tblTrack_User> tblTrack_User { get; set; }
        public virtual DbSet<tblType_Of_Inventory> tblType_Of_Inventory { get; set; }
        public virtual DbSet<tblUser_Tracking> tblUser_Tracking { get; set; }
        public virtual DbSet<tblVoucher> tblVouchers { get; set; }
        public virtual DbSet<tblVoucher_No> tblVoucher_No { get; set; }
        public virtual DbSet<tblVoucher_Rent_Invertory_Rent_And_Other_Voucher> tblVoucher_Rent_Invertory_Rent_And_Other_Voucher { get; set; }
    
        public virtual int AddCheckIn(string sID, string dATE, string tIME, string tYPE)
        {
            var sIDParameter = sID != null ?
                new ObjectParameter("SID", sID) :
                new ObjectParameter("SID", typeof(string));
    
            var dATEParameter = dATE != null ?
                new ObjectParameter("DATE", dATE) :
                new ObjectParameter("DATE", typeof(string));
    
            var tIMEParameter = tIME != null ?
                new ObjectParameter("TIME", tIME) :
                new ObjectParameter("TIME", typeof(string));
    
            var tYPEParameter = tYPE != null ?
                new ObjectParameter("TYPE", tYPE) :
                new ObjectParameter("TYPE", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddCheckIn", sIDParameter, dATEParameter, tIMEParameter, tYPEParameter);
        }
    
        public virtual int AddLoginCodeGeneration(Nullable<int> pK_Staff_Id, string loginCodeGeneration)
        {
            var pK_Staff_IdParameter = pK_Staff_Id.HasValue ?
                new ObjectParameter("PK_Staff_Id", pK_Staff_Id) :
                new ObjectParameter("PK_Staff_Id", typeof(int));
    
            var loginCodeGenerationParameter = loginCodeGeneration != null ?
                new ObjectParameter("LoginCodeGeneration", loginCodeGeneration) :
                new ObjectParameter("LoginCodeGeneration", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddLoginCodeGeneration", pK_Staff_IdParameter, loginCodeGenerationParameter);
        }
    
        public virtual int AddNextRoster(Nullable<int> years, Nullable<int> months, Nullable<int> user_id)
        {
            var yearsParameter = years.HasValue ?
                new ObjectParameter("years", years) :
                new ObjectParameter("years", typeof(int));
    
            var monthsParameter = months.HasValue ?
                new ObjectParameter("months", months) :
                new ObjectParameter("months", typeof(int));
    
            var user_idParameter = user_id.HasValue ?
                new ObjectParameter("user_id", user_id) :
                new ObjectParameter("user_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNextRoster", yearsParameter, monthsParameter, user_idParameter);
        }
    
        public virtual int AddPermission(Nullable<int> fK_Staff_Id, Nullable<bool> view_Profile)
        {
            var fK_Staff_IdParameter = fK_Staff_Id.HasValue ?
                new ObjectParameter("FK_Staff_Id", fK_Staff_Id) :
                new ObjectParameter("FK_Staff_Id", typeof(int));
    
            var view_ProfileParameter = view_Profile.HasValue ?
                new ObjectParameter("View_Profile", view_Profile) :
                new ObjectParameter("View_Profile", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddPermission", fK_Staff_IdParameter, view_ProfileParameter);
        }
    
        public virtual int AddRoster(Nullable<int> fK_Staff_Id, Nullable<int> num_Year, Nullable<int> num_Month, Nullable<int> user_Update, string date_Update, string time_Update)
        {
            var fK_Staff_IdParameter = fK_Staff_Id.HasValue ?
                new ObjectParameter("FK_Staff_Id", fK_Staff_Id) :
                new ObjectParameter("FK_Staff_Id", typeof(int));
    
            var num_YearParameter = num_Year.HasValue ?
                new ObjectParameter("Num_Year", num_Year) :
                new ObjectParameter("Num_Year", typeof(int));
    
            var num_MonthParameter = num_Month.HasValue ?
                new ObjectParameter("Num_Month", num_Month) :
                new ObjectParameter("Num_Month", typeof(int));
    
            var user_UpdateParameter = user_Update.HasValue ?
                new ObjectParameter("User_Update", user_Update) :
                new ObjectParameter("User_Update", typeof(int));
    
            var date_UpdateParameter = date_Update != null ?
                new ObjectParameter("Date_Update", date_Update) :
                new ObjectParameter("Date_Update", typeof(string));
    
            var time_UpdateParameter = time_Update != null ?
                new ObjectParameter("Time_Update", time_Update) :
                new ObjectParameter("Time_Update", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddRoster", fK_Staff_IdParameter, num_YearParameter, num_MonthParameter, user_UpdateParameter, date_UpdateParameter, time_UpdateParameter);
        }
    
        public virtual int AddSalaryType(Nullable<int> fK_Sta_Id, string sal_Type, Nullable<double> salary, Nullable<double> card_Phone, Nullable<double> gym, Nullable<double> accommodation, Nullable<double> food, Nullable<double> insurance, Nullable<double> money_Prim, Nullable<double> travel, Nullable<double> gasoline, Nullable<double> oT_Unit_Price, Nullable<double> work_Hour_Taget, Nullable<double> relax_Hour, Nullable<double> off_Day, Nullable<double> aL_Day, Nullable<double> pH_Day, Nullable<double> sick, Nullable<double> uPL, Nullable<double> aB, Nullable<double> cM, Nullable<int> user_Update, string date_Update, string time_Update)
        {
            var fK_Sta_IdParameter = fK_Sta_Id.HasValue ?
                new ObjectParameter("FK_Sta_Id", fK_Sta_Id) :
                new ObjectParameter("FK_Sta_Id", typeof(int));
    
            var sal_TypeParameter = sal_Type != null ?
                new ObjectParameter("Sal_Type", sal_Type) :
                new ObjectParameter("Sal_Type", typeof(string));
    
            var salaryParameter = salary.HasValue ?
                new ObjectParameter("Salary", salary) :
                new ObjectParameter("Salary", typeof(double));
    
            var card_PhoneParameter = card_Phone.HasValue ?
                new ObjectParameter("Card_Phone", card_Phone) :
                new ObjectParameter("Card_Phone", typeof(double));
    
            var gymParameter = gym.HasValue ?
                new ObjectParameter("Gym", gym) :
                new ObjectParameter("Gym", typeof(double));
    
            var accommodationParameter = accommodation.HasValue ?
                new ObjectParameter("Accommodation", accommodation) :
                new ObjectParameter("Accommodation", typeof(double));
    
            var foodParameter = food.HasValue ?
                new ObjectParameter("Food", food) :
                new ObjectParameter("Food", typeof(double));
    
            var insuranceParameter = insurance.HasValue ?
                new ObjectParameter("insurance", insurance) :
                new ObjectParameter("insurance", typeof(double));
    
            var money_PrimParameter = money_Prim.HasValue ?
                new ObjectParameter("Money_Prim", money_Prim) :
                new ObjectParameter("Money_Prim", typeof(double));
    
            var travelParameter = travel.HasValue ?
                new ObjectParameter("Travel", travel) :
                new ObjectParameter("Travel", typeof(double));
    
            var gasolineParameter = gasoline.HasValue ?
                new ObjectParameter("Gasoline", gasoline) :
                new ObjectParameter("Gasoline", typeof(double));
    
            var oT_Unit_PriceParameter = oT_Unit_Price.HasValue ?
                new ObjectParameter("OT_Unit_Price", oT_Unit_Price) :
                new ObjectParameter("OT_Unit_Price", typeof(double));
    
            var work_Hour_TagetParameter = work_Hour_Taget.HasValue ?
                new ObjectParameter("Work_Hour_Taget", work_Hour_Taget) :
                new ObjectParameter("Work_Hour_Taget", typeof(double));
    
            var relax_HourParameter = relax_Hour.HasValue ?
                new ObjectParameter("Relax_Hour", relax_Hour) :
                new ObjectParameter("Relax_Hour", typeof(double));
    
            var off_DayParameter = off_Day.HasValue ?
                new ObjectParameter("Off_Day", off_Day) :
                new ObjectParameter("Off_Day", typeof(double));
    
            var aL_DayParameter = aL_Day.HasValue ?
                new ObjectParameter("AL_Day", aL_Day) :
                new ObjectParameter("AL_Day", typeof(double));
    
            var pH_DayParameter = pH_Day.HasValue ?
                new ObjectParameter("PH_Day", pH_Day) :
                new ObjectParameter("PH_Day", typeof(double));
    
            var sickParameter = sick.HasValue ?
                new ObjectParameter("Sick", sick) :
                new ObjectParameter("Sick", typeof(double));
    
            var uPLParameter = uPL.HasValue ?
                new ObjectParameter("UPL", uPL) :
                new ObjectParameter("UPL", typeof(double));
    
            var aBParameter = aB.HasValue ?
                new ObjectParameter("AB", aB) :
                new ObjectParameter("AB", typeof(double));
    
            var cMParameter = cM.HasValue ?
                new ObjectParameter("CM", cM) :
                new ObjectParameter("CM", typeof(double));
    
            var user_UpdateParameter = user_Update.HasValue ?
                new ObjectParameter("User_Update", user_Update) :
                new ObjectParameter("User_Update", typeof(int));
    
            var date_UpdateParameter = date_Update != null ?
                new ObjectParameter("Date_Update", date_Update) :
                new ObjectParameter("Date_Update", typeof(string));
    
            var time_UpdateParameter = time_Update != null ?
                new ObjectParameter("Time_Update", time_Update) :
                new ObjectParameter("Time_Update", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddSalaryType", fK_Sta_IdParameter, sal_TypeParameter, salaryParameter, card_PhoneParameter, gymParameter, accommodationParameter, foodParameter, insuranceParameter, money_PrimParameter, travelParameter, gasolineParameter, oT_Unit_PriceParameter, work_Hour_TagetParameter, relax_HourParameter, off_DayParameter, aL_DayParameter, pH_DayParameter, sickParameter, uPLParameter, aBParameter, cMParameter, user_UpdateParameter, date_UpdateParameter, time_UpdateParameter);
        }
    
        public virtual ObjectResult<GetALLAnnouncement_Result> GetALLAnnouncement(Nullable<int> bossId, Nullable<int> comId, Nullable<int> locId, Nullable<int> annId)
        {
            var bossIdParameter = bossId.HasValue ?
                new ObjectParameter("bossId", bossId) :
                new ObjectParameter("bossId", typeof(int));
    
            var comIdParameter = comId.HasValue ?
                new ObjectParameter("comId", comId) :
                new ObjectParameter("comId", typeof(int));
    
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("locId", locId) :
                new ObjectParameter("locId", typeof(int));
    
            var annIdParameter = annId.HasValue ?
                new ObjectParameter("annId", annId) :
                new ObjectParameter("annId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetALLAnnouncement_Result>("GetALLAnnouncement", bossIdParameter, comIdParameter, locIdParameter, annIdParameter);
        }
    
        public virtual ObjectResult<GetAllBoss_Result> GetAllBoss(string name, string phone, string code, string address, string status)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllBoss_Result>("GetAllBoss", nameParameter, phoneParameter, codeParameter, addressParameter, statusParameter);
        }
    
        public virtual ObjectResult<GetAllCompanies_Result> GetAllCompanies(Nullable<int> bossId, string textSearch)
        {
            var bossIdParameter = bossId.HasValue ?
                new ObjectParameter("BossId", bossId) :
                new ObjectParameter("BossId", typeof(int));
    
            var textSearchParameter = textSearch != null ?
                new ObjectParameter("TextSearch", textSearch) :
                new ObjectParameter("TextSearch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllCompanies_Result>("GetAllCompanies", bossIdParameter, textSearchParameter);
        }
    
        public virtual ObjectResult<GetAllCutMoney_Result> GetAllCutMoney(Nullable<int> bossId, Nullable<int> comId)
        {
            var bossIdParameter = bossId.HasValue ?
                new ObjectParameter("bossId", bossId) :
                new ObjectParameter("bossId", typeof(int));
    
            var comIdParameter = comId.HasValue ?
                new ObjectParameter("comId", comId) :
                new ObjectParameter("comId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllCutMoney_Result>("GetAllCutMoney", bossIdParameter, comIdParameter);
        }
    
        public virtual ObjectResult<GetAllDepartments_Result> GetAllDepartments(Nullable<int> bossId, Nullable<int> companyId, Nullable<int> locationId, string textSearch)
        {
            var bossIdParameter = bossId.HasValue ?
                new ObjectParameter("BossId", bossId) :
                new ObjectParameter("BossId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            var textSearchParameter = textSearch != null ?
                new ObjectParameter("TextSearch", textSearch) :
                new ObjectParameter("TextSearch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllDepartments_Result>("GetAllDepartments", bossIdParameter, companyIdParameter, locationIdParameter, textSearchParameter);
        }
    
        public virtual ObjectResult<GetAllExchange_Result> GetAllExchange(Nullable<int> boss_id, Nullable<int> comp_id, Nullable<int> loc_id, string name)
        {
            var boss_idParameter = boss_id.HasValue ?
                new ObjectParameter("boss_id", boss_id) :
                new ObjectParameter("boss_id", typeof(int));
    
            var comp_idParameter = comp_id.HasValue ?
                new ObjectParameter("comp_id", comp_id) :
                new ObjectParameter("comp_id", typeof(int));
    
            var loc_idParameter = loc_id.HasValue ?
                new ObjectParameter("loc_id", loc_id) :
                new ObjectParameter("loc_id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllExchange_Result>("GetAllExchange", boss_idParameter, comp_idParameter, loc_idParameter, nameParameter);
        }
    
        public virtual ObjectResult<GetAllForgetScan_Result> GetAllForgetScan(Nullable<int> bossId, Nullable<int> comId, Nullable<int> locId, Nullable<int> deptId, Nullable<int> posId, string name, string id, string status)
        {
            var bossIdParameter = bossId.HasValue ?
                new ObjectParameter("bossId", bossId) :
                new ObjectParameter("bossId", typeof(int));
    
            var comIdParameter = comId.HasValue ?
                new ObjectParameter("comId", comId) :
                new ObjectParameter("comId", typeof(int));
    
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("locId", locId) :
                new ObjectParameter("locId", typeof(int));
    
            var deptIdParameter = deptId.HasValue ?
                new ObjectParameter("deptId", deptId) :
                new ObjectParameter("deptId", typeof(int));
    
            var posIdParameter = posId.HasValue ?
                new ObjectParameter("posId", posId) :
                new ObjectParameter("posId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllForgetScan_Result>("GetAllForgetScan", bossIdParameter, comIdParameter, locIdParameter, deptIdParameter, posIdParameter, nameParameter, idParameter, statusParameter);
        }
    
        public virtual ObjectResult<GetAllInputMoney_Result> GetAllInputMoney(Nullable<int> bid, Nullable<int> cid, Nullable<int> lid, Nullable<int> did, Nullable<int> pid, string name, string id, string status)
        {
            var bidParameter = bid.HasValue ?
                new ObjectParameter("bid", bid) :
                new ObjectParameter("bid", typeof(int));
    
            var cidParameter = cid.HasValue ?
                new ObjectParameter("cid", cid) :
                new ObjectParameter("cid", typeof(int));
    
            var lidParameter = lid.HasValue ?
                new ObjectParameter("lid", lid) :
                new ObjectParameter("lid", typeof(int));
    
            var didParameter = did.HasValue ?
                new ObjectParameter("did", did) :
                new ObjectParameter("did", typeof(int));
    
            var pidParameter = pid.HasValue ?
                new ObjectParameter("pid", pid) :
                new ObjectParameter("pid", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllInputMoney_Result>("GetAllInputMoney", bidParameter, cidParameter, lidParameter, didParameter, pidParameter, nameParameter, idParameter, statusParameter);
        }
    
        public virtual ObjectResult<GetAllLocation_Result> GetAllLocation(Nullable<int> boss_id, Nullable<int> com_id, string location)
        {
            var boss_idParameter = boss_id.HasValue ?
                new ObjectParameter("boss_id", boss_id) :
                new ObjectParameter("boss_id", typeof(int));
    
            var com_idParameter = com_id.HasValue ?
                new ObjectParameter("com_id", com_id) :
                new ObjectParameter("com_id", typeof(int));
    
            var locationParameter = location != null ?
                new ObjectParameter("location", location) :
                new ObjectParameter("location", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllLocation_Result>("GetAllLocation", boss_idParameter, com_idParameter, locationParameter);
        }
    
        public virtual ObjectResult<GetAllMeasure_Result> GetAllMeasure(Nullable<int> bid, string measure)
        {
            var bidParameter = bid.HasValue ?
                new ObjectParameter("bid", bid) :
                new ObjectParameter("bid", typeof(int));
    
            var measureParameter = measure != null ?
                new ObjectParameter("measure", measure) :
                new ObjectParameter("measure", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllMeasure_Result>("GetAllMeasure", bidParameter, measureParameter);
        }
    
        public virtual ObjectResult<GetAllOT_Result> GetAllOT(Nullable<int> bossId, Nullable<int> comId, Nullable<int> locId, Nullable<int> deptId, Nullable<int> posId, Nullable<int> staffId, Nullable<int> otId, string status)
        {
            var bossIdParameter = bossId.HasValue ?
                new ObjectParameter("bossId", bossId) :
                new ObjectParameter("bossId", typeof(int));
    
            var comIdParameter = comId.HasValue ?
                new ObjectParameter("comId", comId) :
                new ObjectParameter("comId", typeof(int));
    
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("locId", locId) :
                new ObjectParameter("locId", typeof(int));
    
            var deptIdParameter = deptId.HasValue ?
                new ObjectParameter("deptId", deptId) :
                new ObjectParameter("deptId", typeof(int));
    
            var posIdParameter = posId.HasValue ?
                new ObjectParameter("posId", posId) :
                new ObjectParameter("posId", typeof(int));
    
            var staffIdParameter = staffId.HasValue ?
                new ObjectParameter("staffId", staffId) :
                new ObjectParameter("staffId", typeof(int));
    
            var otIdParameter = otId.HasValue ?
                new ObjectParameter("otId", otId) :
                new ObjectParameter("otId", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllOT_Result>("GetAllOT", bossIdParameter, comIdParameter, locIdParameter, deptIdParameter, posIdParameter, staffIdParameter, otIdParameter, statusParameter);
        }
    
        public virtual ObjectResult<GetAllPositions_Result> GetAllPositions(Nullable<int> bossId, Nullable<int> companyId, Nullable<int> locationId, Nullable<int> deptId, string textSearch)
        {
            var bossIdParameter = bossId.HasValue ?
                new ObjectParameter("BossId", bossId) :
                new ObjectParameter("BossId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            var deptIdParameter = deptId.HasValue ?
                new ObjectParameter("DeptId", deptId) :
                new ObjectParameter("DeptId", typeof(int));
    
            var textSearchParameter = textSearch != null ?
                new ObjectParameter("TextSearch", textSearch) :
                new ObjectParameter("TextSearch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllPositions_Result>("GetAllPositions", bossIdParameter, companyIdParameter, locationIdParameter, deptIdParameter, textSearchParameter);
        }
    
        public virtual ObjectResult<GetAllProductGrade_Result> GetAllProductGrade(Nullable<int> bid, Nullable<int> product_type_Id, string pro_type, Nullable<int> product_id, string codeProduct, string barcode, string qrCode, string grade, string color, string sizes, string status)
        {
            var bidParameter = bid.HasValue ?
                new ObjectParameter("bid", bid) :
                new ObjectParameter("bid", typeof(int));
    
            var product_type_IdParameter = product_type_Id.HasValue ?
                new ObjectParameter("product_type_Id", product_type_Id) :
                new ObjectParameter("product_type_Id", typeof(int));
    
            var pro_typeParameter = pro_type != null ?
                new ObjectParameter("pro_type", pro_type) :
                new ObjectParameter("pro_type", typeof(string));
    
            var product_idParameter = product_id.HasValue ?
                new ObjectParameter("product_id", product_id) :
                new ObjectParameter("product_id", typeof(int));
    
            var codeProductParameter = codeProduct != null ?
                new ObjectParameter("codeProduct", codeProduct) :
                new ObjectParameter("codeProduct", typeof(string));
    
            var barcodeParameter = barcode != null ?
                new ObjectParameter("barcode", barcode) :
                new ObjectParameter("barcode", typeof(string));
    
            var qrCodeParameter = qrCode != null ?
                new ObjectParameter("qrCode", qrCode) :
                new ObjectParameter("qrCode", typeof(string));
    
            var gradeParameter = grade != null ?
                new ObjectParameter("grade", grade) :
                new ObjectParameter("grade", typeof(string));
    
            var colorParameter = color != null ?
                new ObjectParameter("color", color) :
                new ObjectParameter("color", typeof(string));
    
            var sizesParameter = sizes != null ?
                new ObjectParameter("sizes", sizes) :
                new ObjectParameter("sizes", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllProductGrade_Result>("GetAllProductGrade", bidParameter, product_type_IdParameter, pro_typeParameter, product_idParameter, codeProductParameter, barcodeParameter, qrCodeParameter, gradeParameter, colorParameter, sizesParameter, statusParameter);
        }
    
        public virtual ObjectResult<GetAllProducts_Result> GetAllProducts(Nullable<int> bid, string type, string typeName, string product)
        {
            var bidParameter = bid.HasValue ?
                new ObjectParameter("bid", bid) :
                new ObjectParameter("bid", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var typeNameParameter = typeName != null ?
                new ObjectParameter("typeName", typeName) :
                new ObjectParameter("typeName", typeof(string));
    
            var productParameter = product != null ?
                new ObjectParameter("product", product) :
                new ObjectParameter("product", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllProducts_Result>("GetAllProducts", bidParameter, typeParameter, typeNameParameter, productParameter);
        }
    
        public virtual ObjectResult<GetAllProductStockIn_Result> GetAllProductStockIn(Nullable<int> bid, Nullable<int> companyId, Nullable<int> product_type_Id, string pro_type, Nullable<int> product_id, string codeProduct, string barcode, string qrCode, string grade, string color, string sizes, string status, string dates, string endDate, string type)
        {
            var bidParameter = bid.HasValue ?
                new ObjectParameter("bid", bid) :
                new ObjectParameter("bid", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var product_type_IdParameter = product_type_Id.HasValue ?
                new ObjectParameter("product_type_Id", product_type_Id) :
                new ObjectParameter("product_type_Id", typeof(int));
    
            var pro_typeParameter = pro_type != null ?
                new ObjectParameter("pro_type", pro_type) :
                new ObjectParameter("pro_type", typeof(string));
    
            var product_idParameter = product_id.HasValue ?
                new ObjectParameter("product_id", product_id) :
                new ObjectParameter("product_id", typeof(int));
    
            var codeProductParameter = codeProduct != null ?
                new ObjectParameter("codeProduct", codeProduct) :
                new ObjectParameter("codeProduct", typeof(string));
    
            var barcodeParameter = barcode != null ?
                new ObjectParameter("barcode", barcode) :
                new ObjectParameter("barcode", typeof(string));
    
            var qrCodeParameter = qrCode != null ?
                new ObjectParameter("qrCode", qrCode) :
                new ObjectParameter("qrCode", typeof(string));
    
            var gradeParameter = grade != null ?
                new ObjectParameter("grade", grade) :
                new ObjectParameter("grade", typeof(string));
    
            var colorParameter = color != null ?
                new ObjectParameter("color", color) :
                new ObjectParameter("color", typeof(string));
    
            var sizesParameter = sizes != null ?
                new ObjectParameter("sizes", sizes) :
                new ObjectParameter("sizes", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var datesParameter = dates != null ?
                new ObjectParameter("dates", dates) :
                new ObjectParameter("dates", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllProductStockIn_Result>("GetAllProductStockIn", bidParameter, companyIdParameter, product_type_IdParameter, pro_typeParameter, product_idParameter, codeProductParameter, barcodeParameter, qrCodeParameter, gradeParameter, colorParameter, sizesParameter, statusParameter, datesParameter, endDateParameter, typeParameter);
        }
    
        public virtual ObjectResult<GetAllProductType_Result> GetAllProductType(Nullable<int> bid, string type, string product)
        {
            var bidParameter = bid.HasValue ?
                new ObjectParameter("bid", bid) :
                new ObjectParameter("bid", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var productParameter = product != null ?
                new ObjectParameter("product", product) :
                new ObjectParameter("product", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllProductType_Result>("GetAllProductType", bidParameter, typeParameter, productParameter);
        }
    
        public virtual ObjectResult<GetAllStaff_Result> GetAllStaff(Nullable<int> bid, Nullable<int> cid, Nullable<int> lid, Nullable<int> did, Nullable<int> pid, string name, string id_card, string status)
        {
            var bidParameter = bid.HasValue ?
                new ObjectParameter("bid", bid) :
                new ObjectParameter("bid", typeof(int));
    
            var cidParameter = cid.HasValue ?
                new ObjectParameter("cid", cid) :
                new ObjectParameter("cid", typeof(int));
    
            var lidParameter = lid.HasValue ?
                new ObjectParameter("lid", lid) :
                new ObjectParameter("lid", typeof(int));
    
            var didParameter = did.HasValue ?
                new ObjectParameter("did", did) :
                new ObjectParameter("did", typeof(int));
    
            var pidParameter = pid.HasValue ?
                new ObjectParameter("pid", pid) :
                new ObjectParameter("pid", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var id_cardParameter = id_card != null ?
                new ObjectParameter("id_card", id_card) :
                new ObjectParameter("id_card", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllStaff_Result>("GetAllStaff", bidParameter, cidParameter, lidParameter, didParameter, pidParameter, nameParameter, id_cardParameter, statusParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> GetAllStaffOnlyId()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("GetAllStaffOnlyId");
        }
    
        public virtual ObjectResult<GetAllStaffOverTime_Result> GetAllStaffOverTime(Nullable<int> bossId, Nullable<int> comId, Nullable<int> locId, Nullable<int> deptId, string name, string cardId, string salaryType)
        {
            var bossIdParameter = bossId.HasValue ?
                new ObjectParameter("bossId", bossId) :
                new ObjectParameter("bossId", typeof(int));
    
            var comIdParameter = comId.HasValue ?
                new ObjectParameter("comId", comId) :
                new ObjectParameter("comId", typeof(int));
    
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("locId", locId) :
                new ObjectParameter("locId", typeof(int));
    
            var deptIdParameter = deptId.HasValue ?
                new ObjectParameter("deptId", deptId) :
                new ObjectParameter("deptId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var cardIdParameter = cardId != null ?
                new ObjectParameter("cardId", cardId) :
                new ObjectParameter("cardId", typeof(string));
    
            var salaryTypeParameter = salaryType != null ?
                new ObjectParameter("salaryType", salaryType) :
                new ObjectParameter("salaryType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllStaffOverTime_Result>("GetAllStaffOverTime", bossIdParameter, comIdParameter, locIdParameter, deptIdParameter, nameParameter, cardIdParameter, salaryTypeParameter);
        }
    
        public virtual ObjectResult<GetAllStaffs_Result> GetAllStaffs(Nullable<int> bossId, Nullable<int> companyId, Nullable<int> locationId, Nullable<int> deptId, Nullable<int> positionId, string salaryType, string status, string textSearch)
        {
            var bossIdParameter = bossId.HasValue ?
                new ObjectParameter("BossId", bossId) :
                new ObjectParameter("BossId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            var deptIdParameter = deptId.HasValue ?
                new ObjectParameter("DeptId", deptId) :
                new ObjectParameter("DeptId", typeof(int));
    
            var positionIdParameter = positionId.HasValue ?
                new ObjectParameter("PositionId", positionId) :
                new ObjectParameter("PositionId", typeof(int));
    
            var salaryTypeParameter = salaryType != null ?
                new ObjectParameter("SalaryType", salaryType) :
                new ObjectParameter("SalaryType", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var textSearchParameter = textSearch != null ?
                new ObjectParameter("TextSearch", textSearch) :
                new ObjectParameter("TextSearch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllStaffs_Result>("GetAllStaffs", bossIdParameter, companyIdParameter, locationIdParameter, deptIdParameter, positionIdParameter, salaryTypeParameter, statusParameter, textSearchParameter);
        }
    
        public virtual ObjectResult<GetAllStaffVoucherByPosition_Result> GetAllStaffVoucherByPosition(Nullable<int> pid)
        {
            var pidParameter = pid.HasValue ?
                new ObjectParameter("pid", pid) :
                new ObjectParameter("pid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllStaffVoucherByPosition_Result>("GetAllStaffVoucherByPosition", pidParameter);
        }
    
        public virtual ObjectResult<GetAllStockBalance_Result> GetAllStockBalance(Nullable<int> bid, Nullable<int> companyId, Nullable<int> product_type_Id, string pro_type, string pro_name, Nullable<int> product_id, string codeProduct, string barcode, string qrCode, string grade, string color, string sizes, string type, string status)
        {
            var bidParameter = bid.HasValue ?
                new ObjectParameter("bid", bid) :
                new ObjectParameter("bid", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var product_type_IdParameter = product_type_Id.HasValue ?
                new ObjectParameter("product_type_Id", product_type_Id) :
                new ObjectParameter("product_type_Id", typeof(int));
    
            var pro_typeParameter = pro_type != null ?
                new ObjectParameter("pro_type", pro_type) :
                new ObjectParameter("pro_type", typeof(string));
    
            var pro_nameParameter = pro_name != null ?
                new ObjectParameter("pro_name", pro_name) :
                new ObjectParameter("pro_name", typeof(string));
    
            var product_idParameter = product_id.HasValue ?
                new ObjectParameter("product_id", product_id) :
                new ObjectParameter("product_id", typeof(int));
    
            var codeProductParameter = codeProduct != null ?
                new ObjectParameter("codeProduct", codeProduct) :
                new ObjectParameter("codeProduct", typeof(string));
    
            var barcodeParameter = barcode != null ?
                new ObjectParameter("barcode", barcode) :
                new ObjectParameter("barcode", typeof(string));
    
            var qrCodeParameter = qrCode != null ?
                new ObjectParameter("qrCode", qrCode) :
                new ObjectParameter("qrCode", typeof(string));
    
            var gradeParameter = grade != null ?
                new ObjectParameter("grade", grade) :
                new ObjectParameter("grade", typeof(string));
    
            var colorParameter = color != null ?
                new ObjectParameter("color", color) :
                new ObjectParameter("color", typeof(string));
    
            var sizesParameter = sizes != null ?
                new ObjectParameter("sizes", sizes) :
                new ObjectParameter("sizes", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllStockBalance_Result>("GetAllStockBalance", bidParameter, companyIdParameter, product_type_IdParameter, pro_typeParameter, pro_nameParameter, product_idParameter, codeProductParameter, barcodeParameter, qrCodeParameter, gradeParameter, colorParameter, sizesParameter, typeParameter, statusParameter);
        }
    
        public virtual ObjectResult<GetAllStockInProductCutBalance_Result> GetAllStockInProductCutBalance(Nullable<int> bid, Nullable<int> companyId, Nullable<int> product_type_Id, string pro_type, Nullable<int> product_id, string codeProduct, string barcode, string qrCode, string grade, string color, string sizes, string status)
        {
            var bidParameter = bid.HasValue ?
                new ObjectParameter("bid", bid) :
                new ObjectParameter("bid", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var product_type_IdParameter = product_type_Id.HasValue ?
                new ObjectParameter("product_type_Id", product_type_Id) :
                new ObjectParameter("product_type_Id", typeof(int));
    
            var pro_typeParameter = pro_type != null ?
                new ObjectParameter("pro_type", pro_type) :
                new ObjectParameter("pro_type", typeof(string));
    
            var product_idParameter = product_id.HasValue ?
                new ObjectParameter("product_id", product_id) :
                new ObjectParameter("product_id", typeof(int));
    
            var codeProductParameter = codeProduct != null ?
                new ObjectParameter("codeProduct", codeProduct) :
                new ObjectParameter("codeProduct", typeof(string));
    
            var barcodeParameter = barcode != null ?
                new ObjectParameter("barcode", barcode) :
                new ObjectParameter("barcode", typeof(string));
    
            var qrCodeParameter = qrCode != null ?
                new ObjectParameter("qrCode", qrCode) :
                new ObjectParameter("qrCode", typeof(string));
    
            var gradeParameter = grade != null ?
                new ObjectParameter("grade", grade) :
                new ObjectParameter("grade", typeof(string));
    
            var colorParameter = color != null ?
                new ObjectParameter("color", color) :
                new ObjectParameter("color", typeof(string));
    
            var sizesParameter = sizes != null ?
                new ObjectParameter("sizes", sizes) :
                new ObjectParameter("sizes", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllStockInProductCutBalance_Result>("GetAllStockInProductCutBalance", bidParameter, companyIdParameter, product_type_IdParameter, pro_typeParameter, product_idParameter, codeProductParameter, barcodeParameter, qrCodeParameter, gradeParameter, colorParameter, sizesParameter, statusParameter);
        }
    
        public virtual ObjectResult<GetAllStockProductCut_Result> GetAllStockProductCut(Nullable<int> bid, Nullable<int> companyId, Nullable<int> product_type_Id, string pro_type, Nullable<int> product_id, string codeProduct, string barcode, string qrCode, string grade, string color, string sizes, string status, string dates, string endDate, string productCutNo)
        {
            var bidParameter = bid.HasValue ?
                new ObjectParameter("bid", bid) :
                new ObjectParameter("bid", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var product_type_IdParameter = product_type_Id.HasValue ?
                new ObjectParameter("product_type_Id", product_type_Id) :
                new ObjectParameter("product_type_Id", typeof(int));
    
            var pro_typeParameter = pro_type != null ?
                new ObjectParameter("pro_type", pro_type) :
                new ObjectParameter("pro_type", typeof(string));
    
            var product_idParameter = product_id.HasValue ?
                new ObjectParameter("product_id", product_id) :
                new ObjectParameter("product_id", typeof(int));
    
            var codeProductParameter = codeProduct != null ?
                new ObjectParameter("codeProduct", codeProduct) :
                new ObjectParameter("codeProduct", typeof(string));
    
            var barcodeParameter = barcode != null ?
                new ObjectParameter("barcode", barcode) :
                new ObjectParameter("barcode", typeof(string));
    
            var qrCodeParameter = qrCode != null ?
                new ObjectParameter("qrCode", qrCode) :
                new ObjectParameter("qrCode", typeof(string));
    
            var gradeParameter = grade != null ?
                new ObjectParameter("grade", grade) :
                new ObjectParameter("grade", typeof(string));
    
            var colorParameter = color != null ?
                new ObjectParameter("color", color) :
                new ObjectParameter("color", typeof(string));
    
            var sizesParameter = sizes != null ?
                new ObjectParameter("sizes", sizes) :
                new ObjectParameter("sizes", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var datesParameter = dates != null ?
                new ObjectParameter("dates", dates) :
                new ObjectParameter("dates", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(string));
    
            var productCutNoParameter = productCutNo != null ?
                new ObjectParameter("productCutNo", productCutNo) :
                new ObjectParameter("productCutNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllStockProductCut_Result>("GetAllStockProductCut", bidParameter, companyIdParameter, product_type_IdParameter, pro_typeParameter, product_idParameter, codeProductParameter, barcodeParameter, qrCodeParameter, gradeParameter, colorParameter, sizesParameter, statusParameter, datesParameter, endDateParameter, productCutNoParameter);
        }
    
        public virtual ObjectResult<GetAllSupplier_Result> GetAllSupplier(Nullable<int> boss_id, Nullable<int> com_id, Nullable<int> loc_id, string sup_name, string phone)
        {
            var boss_idParameter = boss_id.HasValue ?
                new ObjectParameter("boss_id", boss_id) :
                new ObjectParameter("boss_id", typeof(int));
    
            var com_idParameter = com_id.HasValue ?
                new ObjectParameter("com_id", com_id) :
                new ObjectParameter("com_id", typeof(int));
    
            var loc_idParameter = loc_id.HasValue ?
                new ObjectParameter("loc_id", loc_id) :
                new ObjectParameter("loc_id", typeof(int));
    
            var sup_nameParameter = sup_name != null ?
                new ObjectParameter("sup_name", sup_name) :
                new ObjectParameter("sup_name", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllSupplier_Result>("GetAllSupplier", boss_idParameter, com_idParameter, loc_idParameter, sup_nameParameter, phoneParameter);
        }
    
        public virtual ObjectResult<GetAllTax_Result> GetAllTax(Nullable<int> bid, Nullable<int> cid)
        {
            var bidParameter = bid.HasValue ?
                new ObjectParameter("bid", bid) :
                new ObjectParameter("bid", typeof(int));
    
            var cidParameter = cid.HasValue ?
                new ObjectParameter("cid", cid) :
                new ObjectParameter("cid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllTax_Result>("GetAllTax", bidParameter, cidParameter);
        }
    
        public virtual ObjectResult<GetAllTransferBalance_Result> GetAllTransferBalance(string bid, string companyId, string locationId, string product_type_Id, string pro_type, string product_id, string barcode, string qrCode, string grade, string color, string sizes, string status)
        {
            var bidParameter = bid != null ?
                new ObjectParameter("bid", bid) :
                new ObjectParameter("bid", typeof(string));
    
            var companyIdParameter = companyId != null ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(string));
    
            var locationIdParameter = locationId != null ?
                new ObjectParameter("locationId", locationId) :
                new ObjectParameter("locationId", typeof(string));
    
            var product_type_IdParameter = product_type_Id != null ?
                new ObjectParameter("product_type_Id", product_type_Id) :
                new ObjectParameter("product_type_Id", typeof(string));
    
            var pro_typeParameter = pro_type != null ?
                new ObjectParameter("pro_type", pro_type) :
                new ObjectParameter("pro_type", typeof(string));
    
            var product_idParameter = product_id != null ?
                new ObjectParameter("product_id", product_id) :
                new ObjectParameter("product_id", typeof(string));
    
            var barcodeParameter = barcode != null ?
                new ObjectParameter("barcode", barcode) :
                new ObjectParameter("barcode", typeof(string));
    
            var qrCodeParameter = qrCode != null ?
                new ObjectParameter("qrCode", qrCode) :
                new ObjectParameter("qrCode", typeof(string));
    
            var gradeParameter = grade != null ?
                new ObjectParameter("grade", grade) :
                new ObjectParameter("grade", typeof(string));
    
            var colorParameter = color != null ?
                new ObjectParameter("color", color) :
                new ObjectParameter("color", typeof(string));
    
            var sizesParameter = sizes != null ?
                new ObjectParameter("sizes", sizes) :
                new ObjectParameter("sizes", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllTransferBalance_Result>("GetAllTransferBalance", bidParameter, companyIdParameter, locationIdParameter, product_type_IdParameter, pro_typeParameter, product_idParameter, barcodeParameter, qrCodeParameter, gradeParameter, colorParameter, sizesParameter, statusParameter);
        }
    
        public virtual ObjectResult<GetAllTransferLocation_Result> GetAllTransferLocation(string bid, string companyId, string locationId, string product_type_Id, string pro_type, string product_id, string codeProduct, string barcode, string qrCode, string grade, string color, string sizes, string status, string dates, string endDate, string no)
        {
            var bidParameter = bid != null ?
                new ObjectParameter("bid", bid) :
                new ObjectParameter("bid", typeof(string));
    
            var companyIdParameter = companyId != null ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(string));
    
            var locationIdParameter = locationId != null ?
                new ObjectParameter("locationId", locationId) :
                new ObjectParameter("locationId", typeof(string));
    
            var product_type_IdParameter = product_type_Id != null ?
                new ObjectParameter("product_type_Id", product_type_Id) :
                new ObjectParameter("product_type_Id", typeof(string));
    
            var pro_typeParameter = pro_type != null ?
                new ObjectParameter("pro_type", pro_type) :
                new ObjectParameter("pro_type", typeof(string));
    
            var product_idParameter = product_id != null ?
                new ObjectParameter("product_id", product_id) :
                new ObjectParameter("product_id", typeof(string));
    
            var codeProductParameter = codeProduct != null ?
                new ObjectParameter("codeProduct", codeProduct) :
                new ObjectParameter("codeProduct", typeof(string));
    
            var barcodeParameter = barcode != null ?
                new ObjectParameter("barcode", barcode) :
                new ObjectParameter("barcode", typeof(string));
    
            var qrCodeParameter = qrCode != null ?
                new ObjectParameter("qrCode", qrCode) :
                new ObjectParameter("qrCode", typeof(string));
    
            var gradeParameter = grade != null ?
                new ObjectParameter("grade", grade) :
                new ObjectParameter("grade", typeof(string));
    
            var colorParameter = color != null ?
                new ObjectParameter("color", color) :
                new ObjectParameter("color", typeof(string));
    
            var sizesParameter = sizes != null ?
                new ObjectParameter("sizes", sizes) :
                new ObjectParameter("sizes", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var datesParameter = dates != null ?
                new ObjectParameter("dates", dates) :
                new ObjectParameter("dates", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(string));
    
            var noParameter = no != null ?
                new ObjectParameter("No", no) :
                new ObjectParameter("No", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllTransferLocation_Result>("GetAllTransferLocation", bidParameter, companyIdParameter, locationIdParameter, product_type_IdParameter, pro_typeParameter, product_idParameter, codeProductParameter, barcodeParameter, qrCodeParameter, gradeParameter, colorParameter, sizesParameter, statusParameter, datesParameter, endDateParameter, noParameter);
        }
    
        public virtual ObjectResult<GetAllUseFabric_Result> GetAllUseFabric(Nullable<int> bid, Nullable<int> companyId, Nullable<int> product_type_Id, string pro_type, Nullable<int> product_id, string codeProduct, string barcode, string qrCode, string grade, string color, string sizes, string dates, string endDate, string productCutNo)
        {
            var bidParameter = bid.HasValue ?
                new ObjectParameter("bid", bid) :
                new ObjectParameter("bid", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var product_type_IdParameter = product_type_Id.HasValue ?
                new ObjectParameter("product_type_Id", product_type_Id) :
                new ObjectParameter("product_type_Id", typeof(int));
    
            var pro_typeParameter = pro_type != null ?
                new ObjectParameter("pro_type", pro_type) :
                new ObjectParameter("pro_type", typeof(string));
    
            var product_idParameter = product_id.HasValue ?
                new ObjectParameter("product_id", product_id) :
                new ObjectParameter("product_id", typeof(int));
    
            var codeProductParameter = codeProduct != null ?
                new ObjectParameter("codeProduct", codeProduct) :
                new ObjectParameter("codeProduct", typeof(string));
    
            var barcodeParameter = barcode != null ?
                new ObjectParameter("barcode", barcode) :
                new ObjectParameter("barcode", typeof(string));
    
            var qrCodeParameter = qrCode != null ?
                new ObjectParameter("qrCode", qrCode) :
                new ObjectParameter("qrCode", typeof(string));
    
            var gradeParameter = grade != null ?
                new ObjectParameter("grade", grade) :
                new ObjectParameter("grade", typeof(string));
    
            var colorParameter = color != null ?
                new ObjectParameter("color", color) :
                new ObjectParameter("color", typeof(string));
    
            var sizesParameter = sizes != null ?
                new ObjectParameter("sizes", sizes) :
                new ObjectParameter("sizes", typeof(string));
    
            var datesParameter = dates != null ?
                new ObjectParameter("dates", dates) :
                new ObjectParameter("dates", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(string));
    
            var productCutNoParameter = productCutNo != null ?
                new ObjectParameter("productCutNo", productCutNo) :
                new ObjectParameter("productCutNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllUseFabric_Result>("GetAllUseFabric", bidParameter, companyIdParameter, product_type_IdParameter, pro_typeParameter, product_idParameter, codeProductParameter, barcodeParameter, qrCodeParameter, gradeParameter, colorParameter, sizesParameter, datesParameter, endDateParameter, productCutNoParameter);
        }
    
        public virtual ObjectResult<GetAllUserFabircBalance_Result> GetAllUserFabircBalance(Nullable<int> bid, Nullable<int> companyId, Nullable<int> product_type_Id, string pro_type, Nullable<int> product_id, string codeProduct, string barcode, string qrCode, string grade, string color, string sizes, string status)
        {
            var bidParameter = bid.HasValue ?
                new ObjectParameter("bid", bid) :
                new ObjectParameter("bid", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var product_type_IdParameter = product_type_Id.HasValue ?
                new ObjectParameter("product_type_Id", product_type_Id) :
                new ObjectParameter("product_type_Id", typeof(int));
    
            var pro_typeParameter = pro_type != null ?
                new ObjectParameter("pro_type", pro_type) :
                new ObjectParameter("pro_type", typeof(string));
    
            var product_idParameter = product_id.HasValue ?
                new ObjectParameter("product_id", product_id) :
                new ObjectParameter("product_id", typeof(int));
    
            var codeProductParameter = codeProduct != null ?
                new ObjectParameter("codeProduct", codeProduct) :
                new ObjectParameter("codeProduct", typeof(string));
    
            var barcodeParameter = barcode != null ?
                new ObjectParameter("barcode", barcode) :
                new ObjectParameter("barcode", typeof(string));
    
            var qrCodeParameter = qrCode != null ?
                new ObjectParameter("qrCode", qrCode) :
                new ObjectParameter("qrCode", typeof(string));
    
            var gradeParameter = grade != null ?
                new ObjectParameter("grade", grade) :
                new ObjectParameter("grade", typeof(string));
    
            var colorParameter = color != null ?
                new ObjectParameter("color", color) :
                new ObjectParameter("color", typeof(string));
    
            var sizesParameter = sizes != null ?
                new ObjectParameter("sizes", sizes) :
                new ObjectParameter("sizes", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllUserFabircBalance_Result>("GetAllUserFabircBalance", bidParameter, companyIdParameter, product_type_IdParameter, pro_typeParameter, product_idParameter, codeProductParameter, barcodeParameter, qrCodeParameter, gradeParameter, colorParameter, sizesParameter, statusParameter);
        }
    
        public virtual ObjectResult<GetAllVoucher_Result> GetAllVoucher(Nullable<int> bossId, Nullable<int> companyId, Nullable<int> locationId, Nullable<int> staffId, string status, string starts, string ends, string vouchersNo)
        {
            var bossIdParameter = bossId.HasValue ?
                new ObjectParameter("bossId", bossId) :
                new ObjectParameter("bossId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("locationId", locationId) :
                new ObjectParameter("locationId", typeof(int));
    
            var staffIdParameter = staffId.HasValue ?
                new ObjectParameter("staffId", staffId) :
                new ObjectParameter("staffId", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var startsParameter = starts != null ?
                new ObjectParameter("starts", starts) :
                new ObjectParameter("starts", typeof(string));
    
            var endsParameter = ends != null ?
                new ObjectParameter("ends", ends) :
                new ObjectParameter("ends", typeof(string));
    
            var vouchersNoParameter = vouchersNo != null ?
                new ObjectParameter("vouchersNo", vouchersNo) :
                new ObjectParameter("vouchersNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllVoucher_Result>("GetAllVoucher", bossIdParameter, companyIdParameter, locationIdParameter, staffIdParameter, statusParameter, startsParameter, endsParameter, vouchersNoParameter);
        }
    
        public virtual ObjectResult<GetAllVoucherNo_Result> GetAllVoucherNo(Nullable<int> bossId, Nullable<int> comId, Nullable<int> locId, Nullable<int> sid, string status, string start, string ends, Nullable<int> voucherNo)
        {
            var bossIdParameter = bossId.HasValue ?
                new ObjectParameter("bossId", bossId) :
                new ObjectParameter("bossId", typeof(int));
    
            var comIdParameter = comId.HasValue ?
                new ObjectParameter("comId", comId) :
                new ObjectParameter("comId", typeof(int));
    
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("locId", locId) :
                new ObjectParameter("locId", typeof(int));
    
            var sidParameter = sid.HasValue ?
                new ObjectParameter("sid", sid) :
                new ObjectParameter("sid", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var startParameter = start != null ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(string));
    
            var endsParameter = ends != null ?
                new ObjectParameter("ends", ends) :
                new ObjectParameter("ends", typeof(string));
    
            var voucherNoParameter = voucherNo.HasValue ?
                new ObjectParameter("voucherNo", voucherNo) :
                new ObjectParameter("voucherNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllVoucherNo_Result>("GetAllVoucherNo", bossIdParameter, comIdParameter, locIdParameter, sidParameter, statusParameter, startParameter, endsParameter, voucherNoParameter);
        }
    
        public virtual ObjectResult<GetAllVoucherRent_Result> GetAllVoucherRent(Nullable<int> bossId, Nullable<int> comId, Nullable<int> locId, string type, string code, string name)
        {
            var bossIdParameter = bossId.HasValue ?
                new ObjectParameter("bossId", bossId) :
                new ObjectParameter("bossId", typeof(int));
    
            var comIdParameter = comId.HasValue ?
                new ObjectParameter("comId", comId) :
                new ObjectParameter("comId", typeof(int));
    
            var locIdParameter = locId.HasValue ?
                new ObjectParameter("locId", locId) :
                new ObjectParameter("locId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllVoucherRent_Result>("GetAllVoucherRent", bossIdParameter, comIdParameter, locIdParameter, typeParameter, codeParameter, nameParameter);
        }
    
        public virtual ObjectResult<string> GetBarcode(Nullable<int> bid, string values)
        {
            var bidParameter = bid.HasValue ?
                new ObjectParameter("bid", bid) :
                new ObjectParameter("bid", typeof(int));
    
            var valuesParameter = values != null ?
                new ObjectParameter("values", values) :
                new ObjectParameter("values", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetBarcode", bidParameter, valuesParameter);
        }
    
        public virtual ObjectResult<GetBoss_Result> GetBoss()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBoss_Result>("GetBoss");
        }
    
        public virtual ObjectResult<GetCanLeave_Result> GetCanLeave(Nullable<int> staff_id)
        {
            var staff_idParameter = staff_id.HasValue ?
                new ObjectParameter("staff_id", staff_id) :
                new ObjectParameter("staff_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCanLeave_Result>("GetCanLeave", staff_idParameter);
        }
    
        public virtual ObjectResult<GetCompany_Result> GetCompany()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCompany_Result>("GetCompany");
        }
    
        public virtual ObjectResult<GetCompanyByBossId_Result> GetCompanyByBossId(Nullable<int> bossId)
        {
            var bossIdParameter = bossId.HasValue ?
                new ObjectParameter("BossId", bossId) :
                new ObjectParameter("BossId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCompanyByBossId_Result>("GetCompanyByBossId", bossIdParameter);
        }
    
        public virtual ObjectResult<GetCompanyInfoByStaffId_Result> GetCompanyInfoByStaffId(Nullable<int> pK_Sta_Id)
        {
            var pK_Sta_IdParameter = pK_Sta_Id.HasValue ?
                new ObjectParameter("PK_Sta_Id", pK_Sta_Id) :
                new ObjectParameter("PK_Sta_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCompanyInfoByStaffId_Result>("GetCompanyInfoByStaffId", pK_Sta_IdParameter);
        }
    
        public virtual ObjectResult<GetDepartment_Result> GetDepartment()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDepartment_Result>("GetDepartment");
        }
    
        public virtual ObjectResult<GetExchange_Result> GetExchange(Nullable<int> bossId, Nullable<int> comId)
        {
            var bossIdParameter = bossId.HasValue ?
                new ObjectParameter("bossId", bossId) :
                new ObjectParameter("bossId", typeof(int));
    
            var comIdParameter = comId.HasValue ?
                new ObjectParameter("comId", comId) :
                new ObjectParameter("comId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExchange_Result>("GetExchange", bossIdParameter, comIdParameter);
        }
    
        public virtual ObjectResult<GetLocationByCompanyId_Result> GetLocationByCompanyId(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLocationByCompanyId_Result>("GetLocationByCompanyId", companyIdParameter);
        }
    
        public virtual ObjectResult<GetManager_Result> GetManager(Nullable<int> boss_id, string name, string phone, string code, string status)
        {
            var boss_idParameter = boss_id.HasValue ?
                new ObjectParameter("boss_id", boss_id) :
                new ObjectParameter("boss_id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetManager_Result>("GetManager", boss_idParameter, nameParameter, phoneParameter, codeParameter, statusParameter);
        }
    
        public virtual ObjectResult<GetPosition_Result> GetPosition()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPosition_Result>("GetPosition");
        }
    
        public virtual ObjectResult<string> GetQtCode(Nullable<int> bid, string values)
        {
            var bidParameter = bid.HasValue ?
                new ObjectParameter("bid", bid) :
                new ObjectParameter("bid", typeof(int));
    
            var valuesParameter = values != null ?
                new ObjectParameter("values", values) :
                new ObjectParameter("values", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetQtCode", bidParameter, valuesParameter);
        }
    
        public virtual ObjectResult<GetRoster_Result> GetRoster(Nullable<int> boss_id, Nullable<int> company_id, Nullable<int> location_id, Nullable<int> dept_id, Nullable<int> post_id, string staff_name, string id_card, string status, Nullable<int> years, Nullable<int> months)
        {
            var boss_idParameter = boss_id.HasValue ?
                new ObjectParameter("boss_id", boss_id) :
                new ObjectParameter("boss_id", typeof(int));
    
            var company_idParameter = company_id.HasValue ?
                new ObjectParameter("company_id", company_id) :
                new ObjectParameter("company_id", typeof(int));
    
            var location_idParameter = location_id.HasValue ?
                new ObjectParameter("location_id", location_id) :
                new ObjectParameter("location_id", typeof(int));
    
            var dept_idParameter = dept_id.HasValue ?
                new ObjectParameter("dept_id", dept_id) :
                new ObjectParameter("dept_id", typeof(int));
    
            var post_idParameter = post_id.HasValue ?
                new ObjectParameter("post_id", post_id) :
                new ObjectParameter("post_id", typeof(int));
    
            var staff_nameParameter = staff_name != null ?
                new ObjectParameter("staff_name", staff_name) :
                new ObjectParameter("staff_name", typeof(string));
    
            var id_cardParameter = id_card != null ?
                new ObjectParameter("id_card", id_card) :
                new ObjectParameter("id_card", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var yearsParameter = years.HasValue ?
                new ObjectParameter("years", years) :
                new ObjectParameter("years", typeof(int));
    
            var monthsParameter = months.HasValue ?
                new ObjectParameter("months", months) :
                new ObjectParameter("months", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRoster_Result>("GetRoster", boss_idParameter, company_idParameter, location_idParameter, dept_idParameter, post_idParameter, staff_nameParameter, id_cardParameter, statusParameter, yearsParameter, monthsParameter);
        }
    
        public virtual ObjectResult<GetStaffInfo_Result> GetStaffInfo(Nullable<int> staff_Id)
        {
            var staff_IdParameter = staff_Id.HasValue ?
                new ObjectParameter("staff_Id", staff_Id) :
                new ObjectParameter("staff_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStaffInfo_Result>("GetStaffInfo", staff_IdParameter);
        }
    
        public virtual ObjectResult<GetStockBalanceByProductId_Result> GetStockBalanceByProductId(Nullable<int> productId, string productType)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            var productTypeParameter = productType != null ?
                new ObjectParameter("productType", productType) :
                new ObjectParameter("productType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStockBalanceByProductId_Result>("GetStockBalanceByProductId", productIdParameter, productTypeParameter);
        }
    
        public virtual ObjectResult<GetStockInProductCuts_Result> GetStockInProductCuts(Nullable<int> bid, Nullable<int> companyId, Nullable<int> product_type_Id, string pro_type, Nullable<int> product_id, string codeProduct, string barcode, string qrCode, string grade, string color, string sizes, string status, string dates, string endDate, string productCutNo)
        {
            var bidParameter = bid.HasValue ?
                new ObjectParameter("bid", bid) :
                new ObjectParameter("bid", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var product_type_IdParameter = product_type_Id.HasValue ?
                new ObjectParameter("product_type_Id", product_type_Id) :
                new ObjectParameter("product_type_Id", typeof(int));
    
            var pro_typeParameter = pro_type != null ?
                new ObjectParameter("pro_type", pro_type) :
                new ObjectParameter("pro_type", typeof(string));
    
            var product_idParameter = product_id.HasValue ?
                new ObjectParameter("product_id", product_id) :
                new ObjectParameter("product_id", typeof(int));
    
            var codeProductParameter = codeProduct != null ?
                new ObjectParameter("codeProduct", codeProduct) :
                new ObjectParameter("codeProduct", typeof(string));
    
            var barcodeParameter = barcode != null ?
                new ObjectParameter("barcode", barcode) :
                new ObjectParameter("barcode", typeof(string));
    
            var qrCodeParameter = qrCode != null ?
                new ObjectParameter("qrCode", qrCode) :
                new ObjectParameter("qrCode", typeof(string));
    
            var gradeParameter = grade != null ?
                new ObjectParameter("grade", grade) :
                new ObjectParameter("grade", typeof(string));
    
            var colorParameter = color != null ?
                new ObjectParameter("color", color) :
                new ObjectParameter("color", typeof(string));
    
            var sizesParameter = sizes != null ?
                new ObjectParameter("sizes", sizes) :
                new ObjectParameter("sizes", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var datesParameter = dates != null ?
                new ObjectParameter("dates", dates) :
                new ObjectParameter("dates", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(string));
    
            var productCutNoParameter = productCutNo != null ?
                new ObjectParameter("productCutNo", productCutNo) :
                new ObjectParameter("productCutNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStockInProductCuts_Result>("GetStockInProductCuts", bidParameter, companyIdParameter, product_type_IdParameter, pro_typeParameter, product_idParameter, codeProductParameter, barcodeParameter, qrCodeParameter, gradeParameter, colorParameter, sizesParameter, statusParameter, datesParameter, endDateParameter, productCutNoParameter);
        }
    
        public virtual ObjectResult<GetSumLeave_Result> GetSumLeave(Nullable<int> staff_id, Nullable<int> years)
        {
            var staff_idParameter = staff_id.HasValue ?
                new ObjectParameter("staff_id", staff_id) :
                new ObjectParameter("staff_id", typeof(int));
    
            var yearsParameter = years.HasValue ?
                new ObjectParameter("years", years) :
                new ObjectParameter("years", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSumLeave_Result>("GetSumLeave", staff_idParameter, yearsParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetSumTypeLeave(Nullable<int> staff_id, Nullable<int> years, string leaveType)
        {
            var staff_idParameter = staff_id.HasValue ?
                new ObjectParameter("staff_id", staff_id) :
                new ObjectParameter("staff_id", typeof(int));
    
            var yearsParameter = years.HasValue ?
                new ObjectParameter("years", years) :
                new ObjectParameter("years", typeof(int));
    
            var leaveTypeParameter = leaveType != null ?
                new ObjectParameter("leaveType", leaveType) :
                new ObjectParameter("leaveType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetSumTypeLeave", staff_idParameter, yearsParameter, leaveTypeParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int UpdateSalaryType(Nullable<int> fK_Sta_Id, string sal_Type, Nullable<double> salary, Nullable<double> card_Phone, Nullable<double> gym, Nullable<double> accommodation, Nullable<double> food, Nullable<double> insurance, Nullable<double> money_Prim, Nullable<double> travel, Nullable<double> gasoline, Nullable<double> oT_Unit_Price, Nullable<double> work_Hour_Taget, Nullable<double> relax_Hour, Nullable<double> off_Day, Nullable<double> aL_Day, Nullable<double> pH_Day, Nullable<double> sick, Nullable<double> uPL, Nullable<double> aB, Nullable<double> cM, Nullable<int> user_Update, string date_Update, string time_Update, Nullable<int> pK_Sal_Type_Id)
        {
            var fK_Sta_IdParameter = fK_Sta_Id.HasValue ?
                new ObjectParameter("FK_Sta_Id", fK_Sta_Id) :
                new ObjectParameter("FK_Sta_Id", typeof(int));
    
            var sal_TypeParameter = sal_Type != null ?
                new ObjectParameter("Sal_Type", sal_Type) :
                new ObjectParameter("Sal_Type", typeof(string));
    
            var salaryParameter = salary.HasValue ?
                new ObjectParameter("Salary", salary) :
                new ObjectParameter("Salary", typeof(double));
    
            var card_PhoneParameter = card_Phone.HasValue ?
                new ObjectParameter("Card_Phone", card_Phone) :
                new ObjectParameter("Card_Phone", typeof(double));
    
            var gymParameter = gym.HasValue ?
                new ObjectParameter("Gym", gym) :
                new ObjectParameter("Gym", typeof(double));
    
            var accommodationParameter = accommodation.HasValue ?
                new ObjectParameter("Accommodation", accommodation) :
                new ObjectParameter("Accommodation", typeof(double));
    
            var foodParameter = food.HasValue ?
                new ObjectParameter("Food", food) :
                new ObjectParameter("Food", typeof(double));
    
            var insuranceParameter = insurance.HasValue ?
                new ObjectParameter("insurance", insurance) :
                new ObjectParameter("insurance", typeof(double));
    
            var money_PrimParameter = money_Prim.HasValue ?
                new ObjectParameter("Money_Prim", money_Prim) :
                new ObjectParameter("Money_Prim", typeof(double));
    
            var travelParameter = travel.HasValue ?
                new ObjectParameter("Travel", travel) :
                new ObjectParameter("Travel", typeof(double));
    
            var gasolineParameter = gasoline.HasValue ?
                new ObjectParameter("Gasoline", gasoline) :
                new ObjectParameter("Gasoline", typeof(double));
    
            var oT_Unit_PriceParameter = oT_Unit_Price.HasValue ?
                new ObjectParameter("OT_Unit_Price", oT_Unit_Price) :
                new ObjectParameter("OT_Unit_Price", typeof(double));
    
            var work_Hour_TagetParameter = work_Hour_Taget.HasValue ?
                new ObjectParameter("Work_Hour_Taget", work_Hour_Taget) :
                new ObjectParameter("Work_Hour_Taget", typeof(double));
    
            var relax_HourParameter = relax_Hour.HasValue ?
                new ObjectParameter("Relax_Hour", relax_Hour) :
                new ObjectParameter("Relax_Hour", typeof(double));
    
            var off_DayParameter = off_Day.HasValue ?
                new ObjectParameter("Off_Day", off_Day) :
                new ObjectParameter("Off_Day", typeof(double));
    
            var aL_DayParameter = aL_Day.HasValue ?
                new ObjectParameter("AL_Day", aL_Day) :
                new ObjectParameter("AL_Day", typeof(double));
    
            var pH_DayParameter = pH_Day.HasValue ?
                new ObjectParameter("PH_Day", pH_Day) :
                new ObjectParameter("PH_Day", typeof(double));
    
            var sickParameter = sick.HasValue ?
                new ObjectParameter("Sick", sick) :
                new ObjectParameter("Sick", typeof(double));
    
            var uPLParameter = uPL.HasValue ?
                new ObjectParameter("UPL", uPL) :
                new ObjectParameter("UPL", typeof(double));
    
            var aBParameter = aB.HasValue ?
                new ObjectParameter("AB", aB) :
                new ObjectParameter("AB", typeof(double));
    
            var cMParameter = cM.HasValue ?
                new ObjectParameter("CM", cM) :
                new ObjectParameter("CM", typeof(double));
    
            var user_UpdateParameter = user_Update.HasValue ?
                new ObjectParameter("User_Update", user_Update) :
                new ObjectParameter("User_Update", typeof(int));
    
            var date_UpdateParameter = date_Update != null ?
                new ObjectParameter("Date_Update", date_Update) :
                new ObjectParameter("Date_Update", typeof(string));
    
            var time_UpdateParameter = time_Update != null ?
                new ObjectParameter("Time_Update", time_Update) :
                new ObjectParameter("Time_Update", typeof(string));
    
            var pK_Sal_Type_IdParameter = pK_Sal_Type_Id.HasValue ?
                new ObjectParameter("PK_Sal_Type_Id", pK_Sal_Type_Id) :
                new ObjectParameter("PK_Sal_Type_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSalaryType", fK_Sta_IdParameter, sal_TypeParameter, salaryParameter, card_PhoneParameter, gymParameter, accommodationParameter, foodParameter, insuranceParameter, money_PrimParameter, travelParameter, gasolineParameter, oT_Unit_PriceParameter, work_Hour_TagetParameter, relax_HourParameter, off_DayParameter, aL_DayParameter, pH_DayParameter, sickParameter, uPLParameter, aBParameter, cMParameter, user_UpdateParameter, date_UpdateParameter, time_UpdateParameter, pK_Sal_Type_IdParameter);
        }
    
        public virtual int UpdateStaff(Nullable<int> fK_Pos_Id, string staff_Name, string sex, string staff_DOB, string marry_Status, string nationality, Nullable<int> wife, Nullable<int> son, Nullable<int> daughter, string tell, string account_Name, string account_Number, string address, string identity_Card, string identify_Picture, string staff_Id_Card, string serail_Card, string staff_Status, string join_date, string end_Date, string photo, string userName, string no_Scan, Nullable<int> user_Update, string date_Update, string time_Update, Nullable<int> pK_Staff_Id)
        {
            var fK_Pos_IdParameter = fK_Pos_Id.HasValue ?
                new ObjectParameter("FK_Pos_Id", fK_Pos_Id) :
                new ObjectParameter("FK_Pos_Id", typeof(int));
    
            var staff_NameParameter = staff_Name != null ?
                new ObjectParameter("Staff_Name", staff_Name) :
                new ObjectParameter("Staff_Name", typeof(string));
    
            var sexParameter = sex != null ?
                new ObjectParameter("Sex", sex) :
                new ObjectParameter("Sex", typeof(string));
    
            var staff_DOBParameter = staff_DOB != null ?
                new ObjectParameter("Staff_DOB", staff_DOB) :
                new ObjectParameter("Staff_DOB", typeof(string));
    
            var marry_StatusParameter = marry_Status != null ?
                new ObjectParameter("Marry_Status", marry_Status) :
                new ObjectParameter("Marry_Status", typeof(string));
    
            var nationalityParameter = nationality != null ?
                new ObjectParameter("Nationality", nationality) :
                new ObjectParameter("Nationality", typeof(string));
    
            var wifeParameter = wife.HasValue ?
                new ObjectParameter("Wife", wife) :
                new ObjectParameter("Wife", typeof(int));
    
            var sonParameter = son.HasValue ?
                new ObjectParameter("Son", son) :
                new ObjectParameter("Son", typeof(int));
    
            var daughterParameter = daughter.HasValue ?
                new ObjectParameter("Daughter", daughter) :
                new ObjectParameter("Daughter", typeof(int));
    
            var tellParameter = tell != null ?
                new ObjectParameter("Tell", tell) :
                new ObjectParameter("Tell", typeof(string));
    
            var account_NameParameter = account_Name != null ?
                new ObjectParameter("Account_Name", account_Name) :
                new ObjectParameter("Account_Name", typeof(string));
    
            var account_NumberParameter = account_Number != null ?
                new ObjectParameter("Account_Number", account_Number) :
                new ObjectParameter("Account_Number", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var identity_CardParameter = identity_Card != null ?
                new ObjectParameter("Identity_Card", identity_Card) :
                new ObjectParameter("Identity_Card", typeof(string));
    
            var identify_PictureParameter = identify_Picture != null ?
                new ObjectParameter("Identify_Picture", identify_Picture) :
                new ObjectParameter("Identify_Picture", typeof(string));
    
            var staff_Id_CardParameter = staff_Id_Card != null ?
                new ObjectParameter("Staff_Id_Card", staff_Id_Card) :
                new ObjectParameter("Staff_Id_Card", typeof(string));
    
            var serail_CardParameter = serail_Card != null ?
                new ObjectParameter("Serail_Card", serail_Card) :
                new ObjectParameter("Serail_Card", typeof(string));
    
            var staff_StatusParameter = staff_Status != null ?
                new ObjectParameter("Staff_Status", staff_Status) :
                new ObjectParameter("Staff_Status", typeof(string));
    
            var join_dateParameter = join_date != null ?
                new ObjectParameter("Join_date", join_date) :
                new ObjectParameter("Join_date", typeof(string));
    
            var end_DateParameter = end_Date != null ?
                new ObjectParameter("End_Date", end_Date) :
                new ObjectParameter("End_Date", typeof(string));
    
            var photoParameter = photo != null ?
                new ObjectParameter("Photo", photo) :
                new ObjectParameter("Photo", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var no_ScanParameter = no_Scan != null ?
                new ObjectParameter("No_Scan", no_Scan) :
                new ObjectParameter("No_Scan", typeof(string));
    
            var user_UpdateParameter = user_Update.HasValue ?
                new ObjectParameter("User_Update", user_Update) :
                new ObjectParameter("User_Update", typeof(int));
    
            var date_UpdateParameter = date_Update != null ?
                new ObjectParameter("Date_Update", date_Update) :
                new ObjectParameter("Date_Update", typeof(string));
    
            var time_UpdateParameter = time_Update != null ?
                new ObjectParameter("Time_Update", time_Update) :
                new ObjectParameter("Time_Update", typeof(string));
    
            var pK_Staff_IdParameter = pK_Staff_Id.HasValue ?
                new ObjectParameter("PK_Staff_Id", pK_Staff_Id) :
                new ObjectParameter("PK_Staff_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateStaff", fK_Pos_IdParameter, staff_NameParameter, sexParameter, staff_DOBParameter, marry_StatusParameter, nationalityParameter, wifeParameter, sonParameter, daughterParameter, tellParameter, account_NameParameter, account_NumberParameter, addressParameter, identity_CardParameter, identify_PictureParameter, staff_Id_CardParameter, serail_CardParameter, staff_StatusParameter, join_dateParameter, end_DateParameter, photoParameter, userNameParameter, no_ScanParameter, user_UpdateParameter, date_UpdateParameter, time_UpdateParameter, pK_Staff_IdParameter);
        }
    
        public virtual int AddTrackingUser(Nullable<int> u_Id, string online, string iP, string city, string region_Code, string country_Name, string country_Code, string continent_Name, string latitude, string longitude, string iSP, string organization, string date, string time)
        {
            var u_IdParameter = u_Id.HasValue ?
                new ObjectParameter("U_Id", u_Id) :
                new ObjectParameter("U_Id", typeof(int));
    
            var onlineParameter = online != null ?
                new ObjectParameter("Online", online) :
                new ObjectParameter("Online", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var region_CodeParameter = region_Code != null ?
                new ObjectParameter("Region_Code", region_Code) :
                new ObjectParameter("Region_Code", typeof(string));
    
            var country_NameParameter = country_Name != null ?
                new ObjectParameter("Country_Name", country_Name) :
                new ObjectParameter("Country_Name", typeof(string));
    
            var country_CodeParameter = country_Code != null ?
                new ObjectParameter("Country_Code", country_Code) :
                new ObjectParameter("Country_Code", typeof(string));
    
            var continent_NameParameter = continent_Name != null ?
                new ObjectParameter("Continent_Name", continent_Name) :
                new ObjectParameter("Continent_Name", typeof(string));
    
            var latitudeParameter = latitude != null ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(string));
    
            var longitudeParameter = longitude != null ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(string));
    
            var iSPParameter = iSP != null ?
                new ObjectParameter("ISP", iSP) :
                new ObjectParameter("ISP", typeof(string));
    
            var organizationParameter = organization != null ?
                new ObjectParameter("Organization", organization) :
                new ObjectParameter("Organization", typeof(string));
    
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var timeParameter = time != null ?
                new ObjectParameter("Time", time) :
                new ObjectParameter("Time", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddTrackingUser", u_IdParameter, onlineParameter, iPParameter, cityParameter, region_CodeParameter, country_NameParameter, country_CodeParameter, continent_NameParameter, latitudeParameter, longitudeParameter, iSPParameter, organizationParameter, dateParameter, timeParameter);
        }
    
        public virtual int UpdateTrackingUserOffline(Nullable<int> userId, string status)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTrackingUserOffline", userIdParameter, statusParameter);
        }
    }
}
